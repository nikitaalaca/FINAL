import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

import db
from parser import get_v2_keys, validate_v2_key
from keep_alive import keep_alive

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# Reply-–º–µ–Ω—é (–≤ —Å—Ç–∏–ª–µ GEMERA)
main_reply_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")],
        [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞")]
    ],
    resize_keyboard=True
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_keyboard(is_admin=False):
    kb = InlineKeyboardBuilder()
    kb.button(text="üí† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å V2", callback_data="install_v2")
    kb.button(text="‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á", callback_data="update_key")
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    kb.button(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")
    if is_admin:
        kb.button(text="‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_menu")
    return kb.adjust(2).as_markup()

# –ê–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def admin_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="all_users")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    return kb.as_markup()

# /start
@dp.message(F.text == "/start")
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    args = message.text.split()
    ref_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None

    db.add_user(user_id, username, referral_from=ref_id)

    is_admin = (username == ADMIN_USERNAME)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞.", reply_markup=main_reply_menu)

# /profile
@dp.message(F.text == "/profile")
async def profile(message: Message):
    user = db.get_user(message.from_user.id)
    balance = db.get_balance(message.from_user.id)
    until = user[5] if user else "-"
    await message.answer(f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\nüí∏ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {until}")

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å V2
@dp.callback_query(F.data == "install_v2")
async def install_v2(call: types.CallbackQuery):
    keys = get_v2_keys()
    for key in keys:
        if validate_v2_key(key):
            db.add_key(key)
            db.update_until(call.from_user.id, "2025-12-31")
            await call.message.answer(f"üîë –¢–≤–æ–π V2 –∫–ª—é—á:\n<code>{key}</code>")
            return
    await call.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π")

# –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á
@dp.callback_query(F.data == "update_key")
async def update_key(call: types.CallbackQuery):
    key = db.get_active_key()
    if key:
        await call.message.answer(f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–ª—é—á:\n<code>{key}</code>")
    else:
        await call.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π")

# –ë–∞–ª–∞–Ω—Å
@dp.callback_query(F.data == "balance")
async def balance(call: types.CallbackQuery):
    balance = db.get_balance(call.from_user.id)
    await call.message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}‚ÇΩ</b>\n–ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É @{ADMIN_USERNAME} –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")

# –†–µ—Ñ–µ—Ä–∞–ª—ã
@dp.callback_query(F.data == "referrals")
async def referrals(call: types.CallbackQuery):
    user_id = call.from_user.id
    link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    await call.message.answer(f"üë• –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\nüîÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî 100‚ÇΩ!")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.callback_query(F.data == "admin_menu")
async def admin_menu(call: types.CallbackQuery):
    await call.message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard())

@dp.callback_query(F.data == "all_users")
async def all_users(call: types.CallbackQuery):
    users = db.get_all_users()
    msg = "\n".join([f"üë§ {u[1]} | {u[0]} | {u[5] or '-'}" for u in users])
    await call.message.answer(f"<b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n{msg or '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'}")

@dp.callback_query(F.data == "back")
async def back(call: types.CallbackQuery):
    is_admin = (call.from_user.username == ADMIN_USERNAME)
    await call.message.answer("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å...", reply_markup=user_keyboard(is_admin))

# üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å reply-–∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def reply_main_menu(message: Message):
    is_admin = (message.from_user.username == ADMIN_USERNAME)
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=user_keyboard(is_admin))

@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def reply_profile_button(message: Message):
    user = db.get_user(message.from_user.id)
    balance = db.get_balance(message.from_user.id)
    until = user[5] if user else "-"
    await message.answer(f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\nüí∏ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {until}")

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
async def reply_help(message: Message):
    await message.answer(
        "üì• –°–∫–∞—á–∞—Ç—å V2ray:\n"
        "https://apps.apple.com/ru/app/v2box-v2ray-client/id6446814690\n\n"
        "1. –ü–æ–ª—É—á–∏ –∫–ª—é—á —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
        "2. –í—Å—Ç–∞–≤—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "3. –ü–æ–¥–∫–ª—é—á–∞–π—Å—è ‚Äî –≥–æ—Ç–æ–≤–æ!"
    )

@dp.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∞")
async def reply_payment(message: Message):
    await message.answer(
        "üí≥ <b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
        "1 –º–µ—Å—è—Ü ‚Äî 300‚ÇΩ\n"
        "3 –º–µ—Å—è—Ü–∞ ‚Äî 800‚ÇΩ\n"
        "12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2500‚ÇΩ\n\n"
        f"üì® –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É: @{ADMIN_USERNAME} –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
    )

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    keep_alive()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
