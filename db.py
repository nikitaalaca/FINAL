import sqlite3
from datetime import datetime

conn = sqlite3.connect("database.db", check_same_thread=False)
cursor = conn.cursor()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance INTEGER DEFAULT 0,
    referral_from INTEGER,
    trial_used BOOLEAN DEFAULT 0,
    until TEXT,
    is_active BOOLEAN DEFAULT 0,
    user_key TEXT
)
''')

# –ö–ª—é—á–∏
cursor.execute('''
CREATE TABLE IF NOT EXISTS keys (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    key TEXT,
    active BOOLEAN DEFAULT 1
)
''')

# –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS operations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    amount INTEGER,
    comment TEXT,
    date TEXT
)
''')

# ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user_id, username, referral_from=None):
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, username, referral_from) VALUES (?, ?, ?)",
                       (user_id, username, referral_from))
        conn.commit()
        if referral_from and referral_from != user_id:
            update_balance(referral_from, +100, "–†–µ—Ñ–µ—Ä–∞–ª")
        return True
    return False

# üë§ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    return cursor.fetchone()

# ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω–∏–∫
def set_trial_used(user_id):
    cursor.execute("UPDATE users SET trial_used=1 WHERE user_id=?", (user_id,))
    conn.commit()

# ‚è≥ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
def update_until(user_id, until_date):
    cursor.execute("UPDATE users SET until=?, is_active=1 WHERE user_id=?", (until_date, user_id))
    conn.commit()

# üí∏ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å (+/-)
def update_balance(user_id, amount, comment=""):
    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (amount, user_id))
    cursor.execute("INSERT INTO operations (user_id, type, amount, comment, date) VALUES (?, ?, ?, ?, ?)",
                   (user_id, "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", amount, comment, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()

# üìä –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
def get_balance(user_id):
    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

# üì• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
def get_all_users():
    cursor.execute("SELECT * FROM users")
    return cursor.fetchall()

# üîë –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á –≤ –ø—É–ª
def add_key(key):
    cursor.execute("INSERT INTO keys (key) VALUES (?)", (key,))
    conn.commit()

# üîë –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –∏ –≤—ã–∫–ª—é—á–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑–µ
def get_active_key():
    cursor.execute("SELECT key FROM keys WHERE active=1 LIMIT 1")
    result = cursor.fetchone()
    if result:
        cursor.execute("UPDATE keys SET active=0 WHERE key=?", (result[0],))
        conn.commit()
        return result[0]
    return None

# üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def assign_key_to_user(user_id, key):
    cursor.execute("UPDATE users SET user_key=? WHERE user_id=?", (key, user_id))
    conn.commit()

# üì§ –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_key(user_id):
    cursor.execute("SELECT user_key FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None

# üìâ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
def is_user_active(user_id):
    cursor.execute("SELECT is_active FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result[0] == 1 if result else False

# üìú –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
def get_user_operations(user_id):
    cursor.execute("SELECT type, amount, comment, date FROM operations WHERE user_id=? ORDER BY id DESC LIMIT 20", (user_id,))
    return cursor.fetchall()
